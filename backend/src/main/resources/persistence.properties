# postgres DB # IN DOCKER COMPOSE SHOULD BE OVERRIDEN BY ENV VARIABLES

# POSTGRES_USER
spring.datasource.username=postgresuser
# POSTGRES_PASSWORD
spring.datasource.password=postgrespass
spring.datasource.url=jdbc:postgresql://${POSTGRES_HOST}/tcf-db
spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.show-sql=true
spring.jpa.generate-ddl=true

spring.jpa.open-in-view=false

# You can set spring.jpa.hibernate.ddl-auto explicitly and the standard Hibernate property values are none, validate,
# update, create-drop. Spring Boot chooses a default value for you based on whether it thinks your database is embedded
# (default create-drop) or not (default none). An embedded database is detected by looking at the Connection type:
# hsqldb, h2 and derby are embedded, the rest are not. Be careful when switching from in-memory to a ?real? database
# that you don?t make assumptions about the existence of the tables and data in the new platform.
# You either have to set ddl-auto explicitly, or use one of the other mechanisms to initialize the database.
#
# Hibernate property values are: create, update, create-drop, validate and none:
#
# create: Hibernate first drops existing tables, then creates new tables
# update: the object model created based on the mappings (annotations or XML) is compared with the existing schema,
#     and then Hibernate updates the schema according to the diff. It never deletes the existing tables or columns even
#     if they are no more required by the application
# create-drop: similar to create, with the addition that Hibernate will drop the database after all operations are
#     completed. Typically used for unit testing
# validate: Hibernate only validates whether the tables and columns exist, otherwise it throws an exception
# none: this value effectively turns off the DDL generation (USUALLY USED IN PRODUCTION)
#
# In addition, a file named import.sql in the root of the classpath will be executed on startup. This can be useful for
# demos and for testing if you are careful, but probably not something you want to be on the classpath in production.
# It is a Hibernate feature (nothing to do with Spring).
#spring.jpa.hibernate.ddl-auto=update






